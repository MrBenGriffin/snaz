// This is a tab-delimited file of tests.
// Any empty line or line beginning with a / is ignored.
// Lines starting with a # are test headings
// All other lines are tab-delimited name,macrotext,expected result
# Nodetree Accessors
// name		code															expected result
iNumCh 001		@iNumChildren(!siteSections)									3
iNumCh 002		@iNumChildren(!siteSections/^1)									3

iNumGen 01		@iNumGen(!siteSections)											3
iNumGen 02		@iNumGen(!siteSections,3,T)										T
iNumGen 03		[@iNumGen(!siteSections,4,T)]									[]
iNumGen 04		@iNumGen(!siteSections,4,T,F)									F

iNumGens 004	@iNumGens()														6
iNumGens 004t	@iNumGens(6,T,F)												T
iNumPages 006	@iNumPages(!home)												1
iNumPages 061	@iNumPages(!home,1,T,F)											T
iNumPages 01	@iNumPages(!siteSections/0+1)									1

iSize 001		[@iSize(!siteSections)]											[7]
iSize 003		[@iSize(!siteSections,7,T,F)]									[T]
iSize 004		[@iSize(!siteSections,19,T,F)]									[F]

iNumSib 007		@iNumSib(!siteSections/n-0)										3
iNumSib 071		@iNumSib(!siteSections/n-0,1,T,F)								F

//iEqFamily Node family equivalence test. Is parameter 1 the same as or descendant of parameter 2.

iEqFamily 01	@iEqFamily(!siteSections/n-1,!siteSections,T,F)					T
iEqFamily 02	@iEqFamily(!siteSections/n-1,!root,T,F)							T
iEqFamily 03	@iEqFamily(!siteSections/n-1,!siteFooter,T,F)					F
iEqFamily 04	@iEqFamily(!siteFooter,!404,T,F)								F
iEqFamily 05	@iEqFamily(!404,!siteFooter,T,F)								F

iEqNode 01		@iEqNode(!siteSections/0+1,!testpages,T,F)						T
iEqNode 02		@iEqNode(!siteSections/n-1,!home,T,F)							F
iEqNode 03		@iEqNode(W1,/,T,F)												T

iEqSibs 01		@iEqSibs(!siteSections/n-1,!siteSections/0+1,T,F)				T
iEqSibs 02		@iEqSibs(!siteSections/n-1,!siteSections,T,F)					F

iExistNode 01	@iExistNode(!siteSections/n-1,T,F)								T
iExistNode 02	@iExistNode(!soo\*ty/n-1,T,F)									F

//-------------------------------------------------------------------------------

//@iForAncestry(node,dir,root,mark,template)
iForAnc 01		@iIndex(;,@iForAncestry(!print-scss,R,W1,*,@iID(*);))				2;53;83;251;257;261
iForAnc 02		@iIndex(;,@iForAncestry(!print-scss,F,W1,*,@iID(*);))				261;257;251;83;53;2
iForAnc 02b		@iIndex(;,@iForAncestry(!print-scss,,W1,*,@iID(*);))				261;257;251;83;53;2
iForAnc 03		@iIndex(;,@iForAncestry(!print-scss,F,83,*,@iID(*);))				261;257;251;83
iForAnc 04		@iIndex(;,@iForAncestry(!print-scss,R,W1,*,@iNumGen(*);))			1;2;3;4;5;6
iForAnc 05		@iIndex(;,@iForAncestry(!print-scss,F,W1,*,@iNumGen(*);))			6;5;4;3;2;1
iForAnc 06		@iIndex(;,@iForAncestry(!print-scss,F,L27,*,@iNumGen(*);))			6;5;4;3;2
iForAnc 07		@iIndex(;,@iForAncestry(!print-scss,F,C4,*,@iNumGen(*);))			6;5;4;3
iForAnc 08		@iIndex(;,@iForAncestry(!print-scss,F,T1,*,@iNumGen(*);))			6;5;4;3;2;1
iForAnc 09		@iIndex(;,@iForAncestry(!print-scss,F,T3,*,@iNumGen(*);))			6;5;4;3
iForAnc 10		@iIndex(;,@iForAncestry(!print-scss/..,F,T3,*,@iNumGen(*);))		5;4;3

//@iForPeers(n,a,t1,t2,sortparm,txt)
iForPeers		[@iSet(*Z,@iIndex(;,@iForPeers(!print-scss,!print-scss/^2,*,$,+,@iID(*);)))]		[]
iForXXXXb		[@iGet(*Z)]																			[258;259;260;261;262;263;283;266;270]

iForPeers001	[@iIndex(;,@iForPeers(!print-scss/..,!print-scss/^2,*,$,+,@iNumGen(*)))]			[555555555555]
iForPeers002	(@iIndex({,},@iForPeers(!print-scss,!print-scss/^2,*,$,+L,@iLinkRef(*){,})))		(blog-scss,category-scss,editorial-scss,footer-scss,header-scss,layout-scss,print-scss,slick-scss,typography-scss)
iForPeers003	(@iIndex({,},@iForPeers(!print-scss,!print-scss/^2,*,$,+[*f_code],@iID(*){,})))		!1!error: node sort by segment reference is not currently supported.

//@iForNodes(@iGet(*Z),#,$,+s,[@iTitle($)])
iForNodes002	[@iForNodes(@iGet(*Z),*,$,,@iLeft(@iTitle(*),1))]					[LTEPHFSBC]
iForNodes002	[@iForNodes(@iGet(*Z),*,$,+,@iLeft(@iTitle(*),1))]					[LTEPHFSBC]
iForNodes002	[@iForNodes(@iGet(*Z),*,$,-,@iLeft(@iTitle(*),1))]					[CBSFHPETL]
iForNodes001a	[@iForNodes(@iGet(*Z),*,$,+t,@iLeft(@iTitle(*),1))]					[BCEFHLPST]
iForNodes001b	[@iForNodes(@iGet(*Z),*,$,+T,@iLeft(@iTitle(*),1))]					[BCEFHLPST]
iForNodes003	[@iForNodes(@iGet(*Z),*,$,C,@iLeft(@iNumGen(*),1))]					[666666666]
iForNodes004	[@iForNodes(@iGet(*Z),*,$,-C,@iLeft(@iNumGen(*),1))]				[666666666]
iForNodes005	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,W,@iTW(*);))]					[87;88;89;90;91;92;93;96;97]
iForNodes006	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,+,@iLayout(*);))]				[43;43;43;43;43;43;43;43;43]

//@iForSibs(!simple/0+1,#,$,[@iTitle($)])
iForSibs		[@iForSibs(!siteRoot/0+1,*,$,$:@iTW(*):@iID(*); )]					[1:3:19; 2:6:20; 3:13:21; ]
iForSibs 001	@iForSibs(!siteRoot/0+1,*,$,[$:@iLinkRef(*)])						[1:home][2:siteSections][3:siteFooter]

//check values are correct.
iFi_100		@iForIndex(=,BIM=foo=bar,*,$,,[*:$])			[BIM:1][foo:2][bar:3]
iNo_100		@iExistNode(17,@iNumChildren(17/^1),X)			10
iFs_100		@iForSibs(17,*,$,@iLeft(@iLinkRef(*),1))		gbeffhlnpt
forNest01	@iForSibs(17,*,$,@iNumGen(*))					7777777777
forNest02	@iLength(@iForSibs(17,*,$,x))					10
forNest03	@iForAncestry(17,R,17/^2,*,@iNumGen(*);)		5;6;7;
forNest04	[@iForAncestry(17,R,17/^2,NODE,@iNumGen(NODE))]	[567]
forNest05	@iForSibs(17,*,$,[@iForAncestry(*,R,*/^2,NODE,@iNumGen(NODE))])	[567][567][567][567][567][567][567][567][567][567]

//Actual nested parameters..
fNest02	@iForSibs(17,*,$,[@iForAncestry(*,R,*/^2,NODE,@iNumGen(*))])	[555][555][555][555][555][555][555][555][555][555][555][555]

//-------------------------------------------------------------------------------
# NOT YET IMPLEMENTED.
iForNodes007	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,+[*f_code],@iID(*);))]		!1!error: node sort by segment reference is not currently supported.
iExistContent	@iExistContent(!siteSections,f_seodirectory,T,F)				!1!error: iExistContent is not yet implemented.
iExistContent	@iExistContent(!siteSections,code,T,F)							!1!error: iExistContent is not yet implemented.
iNumPage 005	@iNumPage()														!1!error: iNumPage is not yet implemented.
iNumPage 015	@iNumPage(0,T,F)												!1!error: iNumPage is not yet implemented.

