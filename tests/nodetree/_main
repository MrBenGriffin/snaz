// This is a tab-delimited file of tests.
// Any empty line or line beginning with a / is ignored.
// Lines starting with a # are test headings
// All other lines are tab-delimited name,macrotext,expected result
# Nodetree Accessors
F pushNode	109

!	nodetree/iForPeers

# Nodetree Main
ident 000		[@iShortTitle()]											[NL Test B]

// name		code															expected result
iNumCh 001		@iNumChildren(!NodeLocateTestB)									3
iNumCh 002		@iNumChildren(!NodeLocateTestB/^1)								5
iNumCh 003		@iNumChildren()													3
iNumCh 004		@iNumChildren(I0)												3

iNumGen 01		@iNumGen(!NodeLocateTestB)										4
iNumGen 02		@iNumGen(!NodeLocateTestB,4,T)									T
iNumGen 03		[@iNumGen(!NodeLocateTestB,3,T)]								[]
iNumGen 04		@iNumGen(!NodeLocateTestB,3,T,F)								F

iNumGens 004	@iNumGens()														7
iNumGens 004t	@iNumGens(7,T,F)												T

iNumPages 01	@iNumPages(!BuildTest)											1
iNumPages 02	@iNumPages(!BuildTest,1,T,F)									T
iNumPages 03	@iNumPages(!NodeLocateTestB/0+1)								1
iNumPages 04	@iNumPages(!zappendtest)										2


iSize 001		[@iSize(!NodeLocateTestB)]										[4]
iSize 003		[@iSize(!NodeLocateTestB,4,T,F)]								[T]
iSize 004		[@iSize(!NodeLocateTestB,19,T,F)]								[F]

iNumPage 005	@iNumPage()														0
iNumPage 006	@iNumPage(0,T,F)												T

iNumSib 007		@iNumSib(!NodeLocateTestB/n-0)									3
iNumSib 071		@iNumSib(!NodeLocateTestB/n-0,1,T,F)							F

//iEqFamily Node family equivalence test. Is parameter 1 the same as or descendant of parameter 2.

iEqFamily 01	@iEqFamily(!NodeLocateTestB,!NodeLocateTestB,T,F)				T
iEqFamily 02	@iEqFamily(!NodeLocateTestB,!NodeLocation,T,F)					T
iEqFamily 03	@iEqFamily(!NodeLocation,!NodeLocateTestB,T,F)					F
iEqFamily 04	@iEqFamily(!NodeLocateTestB,!Internals,T,F)						F
iEqFamily 05	@iEqFamily(!NodeLocation,!Internals,T,F)						F

iEqNode 01		@iEqNode(!NodeLocator/0+2,!NodeLocateTestB,T,F)					T
iEqNode 02		@iEqNode(!NodeLocateTestB/n-1,!BuildTest,T,F)					F
iEqNode 03		@iEqNode(W1,/,T,F)												T
iEqNode 04		@iEqNode(W1,/0+1,T,F)											!1!alert; deprecated: 2019: /0+1 is deprecated for Root. Use W1 or A1 or /

iEqSibs 01		@iEqSibs(!NodeLocateTestB/n-1,!NodeLocateTestB/0+1,T,F)			T
iEqSibs 02		@iEqSibs(!NodeLocateTestB/n-1,!NodeLocateTestB,T,F)				F

iExistNode 01	@iExistNode(!NodeLocateTestB/n-1,T,F)							T
iExistNode 02	@iExistNode(!soo\*ty/n-1,T,F)									F

//-------------------------------------------------------------------------------

//@iForAncestry(node,dir,root,mark,template)
F pushNode	147
iForAnc 01		@iIndex(;,@iForAncestry(I0,R,W1,*,@iID(*);))				2;100;121;197;147
iForAnc 02		@iIndex(;,@iForAncestry(I0,F,W1,*,@iID(*);))				147;197;121;100;2
iForAnc 03		@iIndex(;,@iForAncestry(I0,,W1,*,@iID(*);))					147;197;121;100;2
iForAnc 04		@iIndex(;,@iForAncestry(I0,R,W1,*,@iNumGen(*);))			1;2;3;4;5
iForAnc 05		@iIndex(;,@iForAncestry(I0,F,W1,*,@iNumGen(*);))			5;4;3;2;1
iForAnc 06		@iIndex(;,@iForAncestry(I0,F,L27,*,@iNumGen(*);))			5;4;3;2;1
iForAnc 07		@iIndex(;,@iForAncestry(I0,F,C4,*,@iNumGen(*);))			5;4;3;2
iForAnc 08		@iIndex(;,@iForAncestry(I0,F,T1,*,@iNumGen(*);))			5;4;3;2;1
iForAnc 09		@iIndex(;,@iForAncestry(I0,F,T3,*,@iNumGen(*);))			5;4;3
iForAnc 10		@iIndex(;,@iForAncestry(I0/..,F,T3,*,@iNumGen(*);))			4;3
iForAnc 11		@iIndex(;,@iForAncestry(!D,F,!NodeLocation,*,@iID(*);))		293;292;291;290;105;312
iForAnc E1		@iIndex(;,@iForAncestry(!D,F,I0,*,@iID(*);))				!1!alert; error: Terminating node is not an ancestor
iForAnc E2		@iIndex(;,@iForAncestry(!W,F,!D,*,@iID(*);))				!1!alert; error: Path: !W did not find a node.
iForAnc E3		@iIndex(;,@iForAncestry(!D,F,!W,*,@iID(*);))				!1!alert; error: Path: !W did not find a node.
F popNode	147

iForPeers		[@iForPeers(!NLTBB,!NLTBB/^2,*,,,@iList(Nodes,add,*))]		[]
iSetList		[@iSet(*Z,@iIndex({,},@iList(Nodes,n,+,*,{@iID(*),})))]		[]
iGetList		@iGet(*Z)													111,112,113,114,115,116,117,118,119,291

iForNodes002	[@iForNodes(@iGet(*Z),*,$,,@iRight(@iTitle(*),1))]					[aBCABCABC1]

//@iForNodes(@iGet(*Z),#,$,+s,[@iTitle($)])
iForNodes022	[@iForNodes(@iGet(*Z),*,$,,@iRight(@iTitle(*),1))]					[aBCABCABC1]
iForNodes032	[@iForNodes(@iGet(*Z),*,$,+,@iRight(@iTitle(*),1))]					[aBCABCABC1]
iForNodes042	[@iForNodes(@iGet(*Z),*,$,-,@iRight(@iTitle(*),1))]					[1CBACBACBa]
iForNodes001a	[@iForNodes(@iGet(*Z),*,$,+t,@iRight(@iTitle(*),1))]				[aBCABCABC1]
iForNodes001b	[@iForNodes(@iGet(*Z),*,$,+T,@iRight(@iTitle(*),1))]				[BCACABCa1B]
iForNodes003	[@iForNodes(@iGet(*Z),*,$,C,@iNumGen(*))]							[5555555555]
iForNodes004	[@iForNodes(@iGet(*Z),*,$,-C,@iNumGen(*))]							[5555555555]
iForNodes005	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,W,@iTW(*);))]					[111;112;113;115;116;117;119;120;121;124]
iForNodes006	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,+,@iLayout(*);))]				[53;53;53;53;53;53;33;53;53;33]

//@iForSibs(!NodeLocateTestB/0+1,#,$,[@iTitle($)])
iForSibs		[@iForSibs(!NodeLocateTestB/0+1,*,$,$:@iTW(*):@iID(*); )]			[1:115:114; 2:116:115; 3:117:116; ]
iForSibs 001	@iForSibs(!NodeLocateTestB/0+1,*,$,[$:@iLinkRef(*)])				[1:nltba][2:NLTBB][3:NLTBc]

//check values are correct.
iFi_100		@iForIndex(=,BIM=foo=bar,*,$,,[*:$])			[BIM:1][foo:2][bar:3]
iNo_100		@iExistNode(W113,@iNumChildren(W113/^1),X)		3
iFs_100		@iForSibs(W113,*,$,@iLeft(@iTitle(*),1))		NNN
forNest01	@iForSibs(W113,*,$,@iNumGen(*))					555
forNest02	@iLength(@iForSibs(W113,*,$,x))					3
forNest03	@iForAncestry(W113,R,,*,@iNumGen(*);)			1;2;3;4;5;
forNest04	[@iForAncestry(W113,R,W113/^2,NODE,@iNumGen(NODE))]	[345]
forNest05	@iForSibs(W113,*,$,[@iForAncestry(*,R,*/^2,NODE,@iNumGen(NODE))])	[345][345][345]
iFsTest		@iForSibs(W113,*,$,[@iID(*)])					[111][112][113]

//Actual nested parameters..
fNest02		@iForSibs(W113,*,$,[@iForAncestry(*,R,*/^2,NODE,@iNumGen(*))])	[555][555][555]
iF5007		@iForSibs(W113,*,$,@iEqNode(*,W113,[@iID(*)],(@iID(*))))		(111)(112)[113]
iF5008		@iForSibs(W113,*,$,(@iID(*)),[@iID(*)])							(111)(112)[113]



iForNodes007	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,+[*EventStart],@iID(*);))]		[114;111;112;119;113;118;116;115]
F popNode	167
