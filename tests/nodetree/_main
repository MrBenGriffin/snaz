// This is a tab-delimited file of tests.
// Any empty line or line beginning with a / is ignored.
// Lines starting with a # are test headings
// All other lines are tab-delimited name,macrotext,expected result
# Nodetree Accessors
F pushNode	109

!	nodetree/iForPeers

ident 000		[@iShortTitle()]											[NL Test B]

// name		code															expected result
iNumCh 001		@iNumChildren(!NodeLocateTestB)									3
iNumCh 002		@iNumChildren(!NodeLocateTestB/^1)								5
iNumCh 003			@iNumChildren()													3
iNumCh 004			@iNumChildren(I0)												3

iNumGen 01		@iNumGen(!NodeLocateTestB)											4
iNumGen 02		@iNumGen(!NodeLocateTestB,4,T)										T
iNumGen 03		[@iNumGen(!NodeLocateTestB,3,T)]									[]
iNumGen 04		@iNumGen(!NodeLocateTestB,3,T,F)									F

iNumGens 004	@iNumGens()														7
iNumGens 004t	@iNumGens(7,T,F)												T

iNumPages 01	@iNumPages(!BuildTest)											1
iNumPages 02	@iNumPages(!BuildTest,1,T,F)									T
iNumPages 03	@iNumPages(!NodeLocateTestB/0+1)								1
iNumPages 04	@iNumPages(!zappendtest)										2


iSize 001		[@iSize(!NodeLocateTestB)]											[4]
iSize 003		[@iSize(!NodeLocateTestB,4,T,F)]									[T]
iSize 004		[@iSize(!NodeLocateTestB,19,T,F)]									[F]

iNumPage 005	@iNumPage()														0
iNumPage 006	@iNumPage(0,T,F)												T

iNumSib 007		@iNumSib(!NodeLocateTestB/n-0)										3
iNumSib 071		@iNumSib(!NodeLocateTestB/n-0,1,T,F)								F

//iEqFamily Node family equivalence test. Is parameter 1 the same as or descendant of parameter 2.

iEqFamily 01	@iEqFamily(!NodeLocateTestB,!NodeLocateTestB,T,F)				T
iEqFamily 02	@iEqFamily(!NodeLocateTestB,!NodeLocation,T,F)					T
iEqFamily 03	@iEqFamily(!NodeLocation,!NodeLocateTestB,T,F)					F
iEqFamily 04	@iEqFamily(!NodeLocateTestB,!Internals,T,F)						F
iEqFamily 05	@iEqFamily(!NodeLocation,!Internals,T,F)						F

iEqNode 01		@iEqNode(!NodeLocator/0+2,!NodeLocateTestB,T,F)					T
iEqNode 02		@iEqNode(!NodeLocateTestB/n-1,!BuildTest,T,F)					F
iEqNode 03		@iEqNode(W1,/,T,F)												T
iEqNode 04		@iEqNode(W1,/0+1,T,F)											!1!depr.: 2019: /0+1 is deprecated for Root. Use I0/A1 or /

iEqSibs 01		@iEqSibs(!NodeLocateTestB/n-1,!NodeLocateTestB/0+1,T,F)				T
iEqSibs 02		@iEqSibs(!NodeLocateTestB/n-1,!NodeLocateTestB,T,F)					F

iExistNode 01	@iExistNode(!NodeLocateTestB/n-1,T,F)								T
iExistNode 02	@iExistNode(!soo\*ty/n-1,T,F)									F

//-------------------------------------------------------------------------------

//@iForAncestry(node,dir,root,mark,template)
F pushNode	147
iForAnc 01		@iIndex(;,@iForAncestry(I0,R,W1,*,@iID(*);))				2;100;121;197;147
iForAnc 02		@iIndex(;,@iForAncestry(I0,F,W1,*,@iID(*);))				147;197;121;100;2
iForAnc 03		@iIndex(;,@iForAncestry(I0,,W1,*,@iID(*);))					147;197;121;100;2
iForAnc 04		@iIndex(;,@iForAncestry(I0,R,W1,*,@iNumGen(*);))			1;2;3;4;5
iForAnc 05		@iIndex(;,@iForAncestry(I0,F,W1,*,@iNumGen(*);))			5;4;3;2;1
iForAnc 06		@iIndex(;,@iForAncestry(I0,F,L27,*,@iNumGen(*);))			5;4;3;2;1
iForAnc 07		@iIndex(;,@iForAncestry(I0,F,C4,*,@iNumGen(*);))			5;4;3;2
iForAnc 08		@iIndex(;,@iForAncestry(I0,F,T1,*,@iNumGen(*);))			5;4;3;2;1
iForAnc 09		@iIndex(;,@iForAncestry(I0,F,T3,*,@iNumGen(*);))			5;4;3
iForAnc 10		@iIndex(;,@iForAncestry(I0/..,F,T3,*,@iNumGen(*);))			4;3
iForAnc 11		@iIndex(;,@iForAncestry(!D,F,!NodeLocation,*,@iID(*);))		293;292;291;290;105;312
iForAnc E1		@iIndex(;,@iForAncestry(!D,F,I0,*,@iID(*);))				!1!error: Terminating node is not an ancestor
iForAnc E2		@iIndex(;,@iForAncestry(!W,F,!D,*,@iID(*);))				!1!error: Path: !W did not find a node.
iForAnc E3		@iIndex(;,@iForAncestry(!D,F,!W,*,@iID(*);))				!1!error: Path: !W did not find a node.
F popNode	147

//@iForNodes(@iGet(*Z),#,$,+s,[@iTitle($)])
iForNodes002	[@iForNodes(@iGet(*Z),*,$,,@iLeft(@iTitle(*),1))]					[LTEPHFSBC]
iForNodes002	[@iForNodes(@iGet(*Z),*,$,+,@iLeft(@iTitle(*),1))]					[LTEPHFSBC]
iForNodes002	[@iForNodes(@iGet(*Z),*,$,-,@iLeft(@iTitle(*),1))]					[CBSFHPETL]
iForNodes001a	[@iForNodes(@iGet(*Z),*,$,+t,@iLeft(@iTitle(*),1))]					[BCEFHLPST]
iForNodes001b	[@iForNodes(@iGet(*Z),*,$,+T,@iLeft(@iTitle(*),1))]					[BCEFHLPST]
iForNodes003	[@iForNodes(@iGet(*Z),*,$,C,@iLeft(@iNumGen(*),1))]					[666666666]
iForNodes004	[@iForNodes(@iGet(*Z),*,$,-C,@iLeft(@iNumGen(*),1))]				[666666666]
iForNodes005	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,W,@iTW(*);))]					[87;88;89;90;91;92;93;96;97]
iForNodes006	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,+,@iLayout(*);))]				[43;43;43;43;43;43;43;43;43]

//@iForSibs(!simple/0+1,#,$,[@iTitle($)])
iForSibs		[@iForSibs(!siteRoot/0+1,*,$,$:@iTW(*):@iID(*); )]					[1:3:19; 2:6:20; 3:13:21; ]
iForSibs 001	@iForSibs(!siteRoot/0+1,*,$,[$:@iLinkRef(*)])						[1:home][2:NodeLocateTestB][3:siteFooter]

//check values are correct.
iFi_100		@iForIndex(=,BIM=foo=bar,*,$,,[*:$])			[BIM:1][foo:2][bar:3]
iNo_100		@iExistNode(19,@iNumChildren(19/^1),X)			3
iFs_100		@iForSibs(19,*,$,@iLeft(@iLinkRef(*),1))		hss
forNest01	@iForSibs(19,*,$,@iNumGen(*))					333
forNest02	@iLength(@iForSibs(19,*,$,x))					3
forNest03	@iForAncestry(19,R,,*,@iNumGen(*);)				1;2;3;
forNest04	[@iForAncestry(19,R,19/^2,NODE,@iNumGen(NODE))]	[123]
forNest05	@iForSibs(19,*,$,[@iForAncestry(*,R,*/^2,NODE,@iNumGen(NODE))])	[123][123][123]

//Actual nested parameters..
fNest02	@iForSibs(19,*,$,[@iForAncestry(*,R,*/^2,NODE,@iNumGen(*))])	[333][333][333]

//-------------------------------------------------------------------------------
# NOT YET IMPLEMENTED.
iForNodes007	[@iIndex(;,@iForNodes(@iGet(*Z),*,$,+[*f_code],@iID(*);))]		!1!error: node sort by segment reference is not currently supported.
F popNode	167
