
# iList
//fn: add,uadd,del,pop,has,count,size,nodes[:max],for[:max]
//    √   √    √   √       √     √    X           √

//@iList(foo,for,R,*,[*])

iListIni1	[@iSet(ZOO,dog;dog;cat;giraffe;thing;dog;dinosaur;cat;fry;thing;paper;dog;dog;cat;zebra;giraffe;thing;dog;cat;bar;bar;foo;dog;cat;thing)]		[]
# iList: add  uadd
iListIni2	[@iForIndex(;,@iGet(ZOO),*,,,@iList(U,uadd,*)@iList(Z,add,*))]	[]
# iList: size
iList001	@iList(U,size):@iList(Z,size)									10:25
# iList: for
iList002	[@iList(U,for)]													[]
iList003	[@iList(U,for,+,*)]												[]
iList004	@iList(U,for,-,*,[*])											[zebra][thing][paper][giraffe][fry][foo][dog][dinosaur][cat][bar]
iList005	@iList(U,for,+,*,[*])											[bar][cat][dinosaur][dog][foo][fry][giraffe][paper][thing][zebra]
iList006	@iList(U,for,+,*,[*:@iList(Z,count,*)])							[bar:2][cat:5][dinosaur:1][dog:7][foo:1][fry:1][giraffe:2][paper:1][thing:4][zebra:1]
# iList: pop
iList007	[@iList(Z,pop,thing)@iList(Z,count,thing)]						[3]
# iList: del
iList008	[@iList(Z,del,thing)@iList(Z,count,thing)]						[0]
# iList: has
iList009	@iList(Z,has,thing,True,False)									False
iList010	@iList(Z,has,dog,True,False)									True
# iList: exists
iList011	@iList(Z,exists,True,False)										True
iList012a	[@iList(Z,del)]													[]
iList012b	@iList(Z,exists,True,False)										False

// Peers Used in Setup
// +-----+------+------+------+------+--------+-------------+--------------+---------------------+
// | id  | p    | tw   | nc   | t    | layout | lnkref      | navtitle     | title               |
// +-----+------+------+------+------+--------+-------------+--------------+---------------------+
//R| 105 |  312 |  111 |  129 |    3 |     33 | NodeLocator | Node Locator | Node Locator        |
// +-----+------+------+------+------+--------+-------------+--------------+---------------------+
// | 111 |  108 |  113 |  114 |    5 |     53 | NLTAa       | AA NL Test   | Node Locate Test aa |
// | 112 |  108 |  114 |  115 |    5 |     53 | NLTAb       | AB NL Test   | Node Locate Test AB |
// | 113 |  108 |  115 |  116 |    5 |     53 | NLTAc       | AC NL Test   | Node Locate Test AC |
// | 114 |  109 |  117 |  118 |    5 |     53 | nltba       | BA NL Test   | Node Locate Test BA |
// | 115 |  109 |  118 |  119 |    5 |     53 | NLTBB       | bb nl test   | node locate test BB |
// | 116 |  109 |  119 |  120 |    5 |     53 | NLTBc       | BC NL Test   | Node Locate Test BC |
// | 117 |  110 |  121 |  122 |    5 |     33 | NLTCa       | CA NL Test   | Node Locate Test CA |
// | 118 |  110 |  122 |  123 |    5 |     53 | NLTCb       | CB NL Test   | Node Locate Test CB |
// | 119 |  110 |  123 |  124 |    5 |     53 | NLTCc       | CC NL Test   | Node Locate Test CC |
// +-----+------+------+------+------+--------+-------------+--------------+---------------------+
//X| 291 |  290 |  126 |  129 |    5 |     33 | Stack1      | Stack1       | Stack1              |
// +-----+------+------+------+------+--------+-------------+--------------+---------------------+

setNodesList	[@iList(Nodes,del)@iForPeers(!NLTBB,!NLTBB/^2,*,,,@iList(Nodes,add,*))]		[]
setEraseStack	@iList(Nodes,s):@iList(Nodes,d,291)@iList(Nodes,s)					10:9

//Now do tests.
kays01		@iList(Nodes,f:5,+,*,@iID(*);)										111;112;113;114;115;
kays05		@iList(Nodes,s):@iList(Nodes,n,+W,*,@iID(*);)						9:111;112;113;114;115;116;117;118;119;
kays02		@iList(Nodes,f:5,R,*,@iID(*);)										?11\d;11\d;11\d;11\d;11\d;

kays03		@iList(Nodes,f:5,-,*,@iID(*);)										115;114;113;112;111;
kays04		@iList(Nodes,f:5,-,*,@iID(*);)										115;114;113;112;111;
kays07a		@iList(Nodes,n:2,+T,*,[@iTitle(*)])									[Node Locate Test AB][Node Locate Test AC]
kays07b		@iList(Nodes,n:2,+t,*,[@iTitle(*)])									[Node Locate Test aa][Node Locate Test AB]
